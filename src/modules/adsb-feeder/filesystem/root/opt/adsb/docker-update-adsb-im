#!/bin/bash

# this needs to run as root
if [ $(id -u) != "0" ] ; then
	echo "this command requires superuser privileges - please run as sudo bash $0"
	exit 1
fi

cd /opt/adsb
TIME=$(date -Iseconds)

# this shell script no longer changes or downloads docker.image.versions, this only happens during feeder-update
# it now merely pulls the container versions as set in config.json / .env

echo "$(date -Iseconds): pulling new container images and restarting docker" >> /opt/adsb/adsb-setup.log
bash ./docker-pull.sh
bash /opt/adsb/docker-compose-start

# finally remove the images and files we no longer use

# https://docs.docker.com/config/pruning/ says: A dangling image is one that isn't tagged, and isn't referenced by any container.
# pretty much all old images we have are tagged so they wouldn't be removed without -a
# but -a also removes current images of for example deactived feed containers
# thus we manually create a list of images that are neither running nor in docker.image.versions
# alert: the following code relies on non quoted bash expansion
PRUNE_LIST=$( \
    docker images -a --format "{{.Repository}}:{{.Tag}}" \
    | grep -F -v \
        $(docker ps -a --format '{{.Image}}' | while read line; do echo -n " -e $line"; done) \
        $(cut -d= -f2 /opt/adsb/docker.image.versions | while read line; do echo -n " -e $line"; done) \
)
if ! [ -f os.adsb.feeder.image ]; then
    # if running as an app, restrict pruned images to images used by adsb.im
    PRUNE_LIST=$( \
        grep -F -e dozzle -e alpine \
            $(cut -d= -f2 /opt/adsb/docker.image.versions | cut -d: -f1 | while read line; do echo -n " -e $line"; done) \
            <<< "$PRUNE_LIST" \
    )
fi

# then all images on this prune list are deleted
echo "PRUNING:"
echo "$PRUNE_LIST"
exit
docker rmi $PRUNE_LIST # unquoted expansion required
echo "PRUNING DONE"


sed -i "s/CONTAINER_VERSION=.*/CONTAINER_VERSION=$TIME/" /opt/adsb/config/.env

echo "$(date -Iseconds): done" >> /opt/adsb/adsb-setup.log
