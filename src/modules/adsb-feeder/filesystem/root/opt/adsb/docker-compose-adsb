#!/bin/bash

# set up the right config files and then pass the arguments
# on to docker compose

# this needs to run as root
if [ "$(id -u)" != "0" ] ; then
    echo "this command requires superuser privileges - please run as sudo bash $0"
    exit 1
fi

# identify the calling process for better log messages
PARENTPID=$(ps -cp $$ -o ppid="")
if kill -0 "$PARENTPID" &> /dev/null ; then
    # shellcheck disable=SC2086 # the ps -q call fails with quotes around the variable
    PARENTPROC=$(ps -q$PARENTPID -o args=)
    if [[ $PARENTPROC = */opt/adsb/docker-compose-start* ]] ; then
        # this one is special as it's just a pretty wrapper around this script,
        # so instead look for the process that called docker-compose-start
        # shellcheck disable=SC2086 # the ps -p call fails with quotes around the variable
        PARENTPID=$(ps -cp $PARENTPID -o ppid="")
        if kill -0 "$PARENTPID" &> /dev/null ; then
            # shellcheck disable=SC2086 # the ps -q call fails with quotes around the variable
            PARENTPROC=$(ps -q$PARENTPID -o args=)
        else
            PARENTPROC="process $PARENTPID (appears already gone)"
        fi
    fi
else
    PARENTPROC="process $PARENTPID (appears already gone)"
fi
echo "$(date -u +"%FT%T.%3NZ") $PARENTPROC called docker-compose-adsb" "$@" >&2

lockFile="/opt/adsb/docker-starting.lock"

while ! ( set -o noclobber; echo "$$" > "$lockFile") 2> /dev/null; do
    if [[ -f "$lockFile" ]] && ! pgrep -F $lockFile &>/dev/null; then
        echo "$(date -u +"%FT%T.%3NZ") docker-compose-adsb lockfile present but associated PID not running, removing lockfile" >&2
        rm -f "$lockFile"
        continue
    fi
    if [[ -z "$waiting_for_lock" ]]; then
        echo "$(date -u +"%FT%T.%3NZ") docker-compose-adsb is already running, will wait for: $(pgrep -a -F $lockFile)" >&2
        waiting_for_lock=1
    fi
    sleep 0.1
done

if [[ -n "$waiting_for_lock" ]]; then
    echo "$(date -u +"%FT%T.%3NZ") docker-compose-adsb finished waiting for lock" >&2
    waiting_for_lock=
fi

trap 'rm -f "$lockFile"; exit $?' INT TERM EXIT

docker_compose="docker compose"
$docker_compose version &> /dev/null || docker_compose="docker-compose"

# when we restart the containers after an upgrade from v1.2.3 or earlier to a later version,
# the very first time we still need to check for the old name of the environment variable
# To make this less ugly, check for the partial name
if grep -q "_IS_BASE_CONFIG_FINISHED=True" /opt/adsb/config/.env 2> /dev/null ; then
    source /opt/adsb/default.docker-compose
    cd /opt/adsb/config || echo "config folder is missing?" >&2
    if [ -f .env.user ] ; then
        # now inject the user env values
        echo "$(date -u +"%FT%T.%3NZ") inject user env"
        python3 /opt/adsb/scripts/inject-env.py .env.user *.yml
    fi
    echo "$(date -u +"%FT%T.%3NZ") sync"
    sync # graphs1090 writeback calls sync, to avoid timeouts during compose call sync now to empty the write cache
    echo "$(date -u +"%FT%T.%3NZ") $docker_compose ${COMPOSE_FILES[@]} $@"
    # third time's a charm
    for i in {1..3}; do
        $docker_compose "${COMPOSE_FILES[@]}" "$@" && break
    done
    if [ "$1" = "up" ] ; then
        # try to figure out if this was successful
        echo "$(date -u +"%FT%T.%3NZ") finished attempting to bring up the containers" >&2
        tempfile=$(mktemp)
        $docker_compose "${COMPOSE_FILES[@]}" ps > "$tempfile"
        if ! grep -q ultrafeeder "$tempfile" ; then
            (
                echo "it looks like ultrafeeder didn't come up"
                echo "docker thinks these containers are running:"
                cat "$tempfile"
                echo "docker thinks these networks are defined:"
                docker network ls
            ) >&2
        fi
        rm -f "$tempfile"
    fi
else
    echo "$(date -u +"%FT%T.%3NZ") things aren't configured, yet, only starting Dozzle and the logger container"
    # third time's a charm
    for i in {1..3}; do
        $docker_compose -f /opt/adsb/config/dozzle.yml "$@" && break
    done
    if [[ "$1" == "pull" ]]; then
        echo "$(date -u +"%FT%T.%3NZ") things aren't configured, yet, but for argument pull will also pull ultrafeeder"
        for i in {1..3}; do
            $docker_compose --env-file /opt/adsb/docker.image.versions -f /opt/adsb/config/docker-compose.yml pull && break
        done
    fi
fi
